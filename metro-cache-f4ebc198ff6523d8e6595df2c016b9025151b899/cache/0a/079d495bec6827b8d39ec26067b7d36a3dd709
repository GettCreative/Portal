__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

    var _jsxFileName = "/home/nooreddein/Desktop/Portal/node_modules/react-native-svg/elements/TextPath.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _react = _require(_dependencyMap[0], "react");

    var _react2 = _interopRequireDefault(_react);

    var _createReactNativeComponentClass = _require(_dependencyMap[1], "../lib/createReactNativeComponentClass");

    var _createReactNativeComponentClass2 = _interopRequireDefault(_createReactNativeComponentClass);

    var _attributes = _require(_dependencyMap[2], "../lib/attributes");

    var _extractText = _require(_dependencyMap[3], "../lib/extract/extractText");

    var _extractText2 = _interopRequireDefault(_extractText);

    var _Shape2 = _require(_dependencyMap[4], "./Shape");

    var _Shape3 = _interopRequireDefault(_Shape2);

    var _props2 = _require(_dependencyMap[5], "../lib/props");

    var _extractProps = _require(_dependencyMap[6], "../lib/extract/extractProps");

    var _extractProps2 = _interopRequireDefault(_extractProps);

    var _TSpan = _require(_dependencyMap[7], "./TSpan");

    var _TSpan2 = _interopRequireDefault(_TSpan);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var idExpReg = /^#(.+)$/;

    var _class = function (_Shape) {
        _inherits(_class, _Shape);

        function _class() {
            _classCallCheck(this, _class);

            return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
        }

        _createClass(_class, [{
            key: "render",
            value: function render() {
                var _props = this.props,
                    children = _props.children,
                    href = _props.href,
                    startOffset = _props.startOffset,
                    method = _props.method,
                    spacing = _props.spacing,
                    side = _props.side,
                    alignmentBaseline = _props.alignmentBaseline,
                    midLine = _props.midLine,
                    props = _objectWithoutProperties(_props, ["children", "href", "startOffset", "method", "spacing", "side", "alignmentBaseline", "midLine"]);

                if (href) {
                    var matched = href.match(idExpReg);

                    if (matched) {
                        href = matched[1];
                        startOffset = "" + (startOffset || 0);
                        return _react2.default.createElement(RNSVGTextPath, _extends({
                            href: href,
                            startOffset: startOffset,
                            method: method,
                            spacing: spacing,
                            side: side,
                            alignmentBaseline: alignmentBaseline,
                            midLine: midLine
                        }, (0, _extractProps2.default)(_extends({}, props, {
                            x: null,
                            y: null
                        }), this), (0, _extractText2.default)({
                            children: children
                        }, true), {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 26
                            }
                        }));
                    }
                }

                console.warn('Invalid `href` prop for `TextPath` element, expected a href like `"#id"`, but got: "' + props.href + '"');
                return _react2.default.createElement(
                    _TSpan2.default,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 41
                        }
                    },
                    children
                );
            }
        }]);

        return _class;
    }(_Shape3.default);

    _class.displayName = 'Span';
    _class.propTypes = _props2.textPathProps;
    exports.default = _class;
    var RNSVGTextPath = (0, _createReactNativeComponentClass2.default)('RNSVGTextPath', function () {
        return {
            validAttributes: _attributes.TextPathAttributes,
            uiViewClassName: 'RNSVGTextPath'
        };
    });
});