__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/home/nooreddein/Desktop/Portal/node_modules/expo/src/GLView.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _Camera = _require(_dependencyMap[4], "./Camera");

  var _Camera2 = _interopRequireDefault(_Camera);

  var _Constants = _require(_dependencyMap[5], "./Constants");

  var _Constants2 = _interopRequireDefault(_Constants);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    GLView: {
      displayName: "GLView"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/nooreddein/Desktop/Portal/node_modules/expo/src/GLView.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var GLView = _wrapComponent("GLView")((_temp2 = _class = function (_React$Component) {
    _inherits(GLView, _React$Component);

    function GLView() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, GLView);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = GLView.__proto__ || Object.getPrototypeOf(GLView)).call.apply(_ref, [this].concat(args))), _this), _this._setNativeRef = function (nativeRef) {
        if (_this.props.nativeRef_EXPERIMENTAL) {
          _this.props.nativeRef_EXPERIMENTAL(nativeRef);
        }

        _this.nativeRef = nativeRef;
      }, _this._onSurfaceCreate = function (_ref2) {
        var exglCtxId = _ref2.nativeEvent.exglCtxId;
        var gl = getGl(exglCtxId);
        _this.exglCtxId = exglCtxId;

        if (_this.props.onContextCreate) {
          _this.props.onContextCreate(gl);
        }
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(GLView, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            onContextCreate = _props.onContextCreate,
            msaaSamples = _props.msaaSamples,
            viewProps = _objectWithoutProperties(_props, ["onContextCreate", "msaaSamples"]);

        return React.createElement(
          _reactNative.View,
          _extends({}, viewProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 95
            }
          }),
          React.createElement(GLView.NativeView, {
            ref: this._setNativeRef,
            style: _extends({
              flex: 1
            }, _reactNative.Platform.OS === 'ios' ? {
              backgroundColor: 'transparent'
            } : {}),
            onSurfaceCreate: this._onSurfaceCreate,
            msaaSamples: _reactNative.Platform.OS === 'ios' ? msaaSamples : undefined,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 96
            }
          })
        );
      }
    }, {
      key: "startARSessionAsync",
      value: function startARSessionAsync() {
        return _reactNative.NativeModules.ExponentGLViewManager.startARSessionAsync((0, _reactNative.findNodeHandle)(this.nativeRef));
      }
    }, {
      key: "createCameraTextureAsync",
      value: function createCameraTextureAsync(cameraRef) {
        var viewTag, cameraTag, _ref3, exglObjId;

        return regeneratorRuntime.async(function createCameraTextureAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                viewTag = (0, _reactNative.findNodeHandle)(this.nativeRef);
                cameraTag = (0, _reactNative.findNodeHandle)(cameraRef);
                _context.next = 4;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentGLObjectManager.createCameraTextureAsync(viewTag, cameraTag));

              case 4:
                _ref3 = _context.sent;
                exglObjId = _ref3.exglObjId;
                return _context.abrupt("return", new WebGLTexture(exglObjId));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "destroyObjectAsync",
      value: function destroyObjectAsync(glObject) {
        return _reactNative.NativeModules.ExponentGLObjectManager.destroyObjectAsync(glObject.id);
      }
    }, {
      key: "takeSnapshotAsync",
      value: function takeSnapshotAsync() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var exglCtxId = this.exglCtxId;
        return GLView.takeSnapshotAsync(exglCtxId, options);
      }
    }], [{
      key: "createContextAsync",
      value: function createContextAsync() {
        var _ref4, exglCtxId;

        return regeneratorRuntime.async(function createContextAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentGLObjectManager.createContextAsync());

              case 2:
                _ref4 = _context2.sent;
                exglCtxId = _ref4.exglCtxId;
                return _context2.abrupt("return", getGl(exglCtxId));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "destroyContextAsync",
      value: function destroyContextAsync(exgl) {
        var exglCtxId;
        return regeneratorRuntime.async(function destroyContextAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                exglCtxId = getContextId(exgl);
                return _context3.abrupt("return", _reactNative.NativeModules.ExponentGLObjectManager.destroyContextAsync(exglCtxId));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "takeSnapshotAsync",
      value: function takeSnapshotAsync(exgl) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var exglCtxId;
        return regeneratorRuntime.async(function takeSnapshotAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                exglCtxId = getContextId(exgl);
                return _context4.abrupt("return", _reactNative.NativeModules.ExponentGLObjectManager.takeSnapshotAsync(exglCtxId, options));

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }]);

    return GLView;
  }(React.Component), _class.propTypes = _extends({
    onContextCreate: _propTypes2.default.func,
    msaaSamples: _propTypes2.default.number,
    nativeRef_EXPERIMENTAL: _propTypes2.default.func
  }, _reactNative.ViewPropTypes), _class.defaultProps = {
    msaaSamples: 4
  }, _class.NativeView = (0, _reactNative.requireNativeComponent)('ExponentGLView', GLView, {
    nativeOnly: {
      onSurfaceCreate: true
    }
  }), _temp2));

  exports.default = GLView;

  var WebGLRenderingContext = function WebGLRenderingContext() {
    _classCallCheck(this, WebGLRenderingContext);
  };

  var WebGL2RenderingContext = function (_WebGLRenderingContex) {
    _inherits(WebGL2RenderingContext, _WebGLRenderingContex);

    function WebGL2RenderingContext() {
      _classCallCheck(this, WebGL2RenderingContext);

      return _possibleConstructorReturn(this, (WebGL2RenderingContext.__proto__ || Object.getPrototypeOf(WebGL2RenderingContext)).apply(this, arguments));
    }

    return WebGL2RenderingContext;
  }(WebGLRenderingContext);

  var idToObject = {};

  var WebGLObject = function () {
    function WebGLObject(id) {
      _classCallCheck(this, WebGLObject);

      if (idToObject[id]) {
        throw new Error("WebGL object with underlying EXGLObjectId '" + id + "' already exists!");
      }

      this.id = id;
    }

    _createClass(WebGLObject, [{
      key: "toString",
      value: function toString() {
        return "[WebGLObject " + this.id + "]";
      }
    }]);

    return WebGLObject;
  }();

  var wrapObject = function wrapObject(type, id) {
    var found = idToObject[id];

    if (found) {
      return found;
    }

    return idToObject[id] = new type(id);
  };

  var objectId = function objectId(obj) {
    return obj && obj.id;
  };

  var WebGLBuffer = function (_WebGLObject) {
    _inherits(WebGLBuffer, _WebGLObject);

    function WebGLBuffer() {
      _classCallCheck(this, WebGLBuffer);

      return _possibleConstructorReturn(this, (WebGLBuffer.__proto__ || Object.getPrototypeOf(WebGLBuffer)).apply(this, arguments));
    }

    return WebGLBuffer;
  }(WebGLObject);

  var WebGLFramebuffer = function (_WebGLObject2) {
    _inherits(WebGLFramebuffer, _WebGLObject2);

    function WebGLFramebuffer() {
      _classCallCheck(this, WebGLFramebuffer);

      return _possibleConstructorReturn(this, (WebGLFramebuffer.__proto__ || Object.getPrototypeOf(WebGLFramebuffer)).apply(this, arguments));
    }

    return WebGLFramebuffer;
  }(WebGLObject);

  var WebGLProgram = function (_WebGLObject3) {
    _inherits(WebGLProgram, _WebGLObject3);

    function WebGLProgram() {
      _classCallCheck(this, WebGLProgram);

      return _possibleConstructorReturn(this, (WebGLProgram.__proto__ || Object.getPrototypeOf(WebGLProgram)).apply(this, arguments));
    }

    return WebGLProgram;
  }(WebGLObject);

  var WebGLRenderbuffer = function (_WebGLObject4) {
    _inherits(WebGLRenderbuffer, _WebGLObject4);

    function WebGLRenderbuffer() {
      _classCallCheck(this, WebGLRenderbuffer);

      return _possibleConstructorReturn(this, (WebGLRenderbuffer.__proto__ || Object.getPrototypeOf(WebGLRenderbuffer)).apply(this, arguments));
    }

    return WebGLRenderbuffer;
  }(WebGLObject);

  var WebGLShader = function (_WebGLObject5) {
    _inherits(WebGLShader, _WebGLObject5);

    function WebGLShader() {
      _classCallCheck(this, WebGLShader);

      return _possibleConstructorReturn(this, (WebGLShader.__proto__ || Object.getPrototypeOf(WebGLShader)).apply(this, arguments));
    }

    return WebGLShader;
  }(WebGLObject);

  var WebGLTexture = function (_WebGLObject6) {
    _inherits(WebGLTexture, _WebGLObject6);

    function WebGLTexture() {
      _classCallCheck(this, WebGLTexture);

      return _possibleConstructorReturn(this, (WebGLTexture.__proto__ || Object.getPrototypeOf(WebGLTexture)).apply(this, arguments));
    }

    return WebGLTexture;
  }(WebGLObject);

  var WebGLUniformLocation = function WebGLUniformLocation(id) {
    _classCallCheck(this, WebGLUniformLocation);

    this.id = id;
  };

  var WebGLActiveInfo = function WebGLActiveInfo(obj) {
    _classCallCheck(this, WebGLActiveInfo);

    _extends(this, obj);
  };

  var WebGLShaderPrecisionFormat = function WebGLShaderPrecisionFormat(obj) {
    _classCallCheck(this, WebGLShaderPrecisionFormat);

    _extends(this, obj);
  };

  var WebGLQuery = function (_WebGLObject7) {
    _inherits(WebGLQuery, _WebGLObject7);

    function WebGLQuery() {
      _classCallCheck(this, WebGLQuery);

      return _possibleConstructorReturn(this, (WebGLQuery.__proto__ || Object.getPrototypeOf(WebGLQuery)).apply(this, arguments));
    }

    return WebGLQuery;
  }(WebGLObject);

  var WebGLSampler = function (_WebGLObject8) {
    _inherits(WebGLSampler, _WebGLObject8);

    function WebGLSampler() {
      _classCallCheck(this, WebGLSampler);

      return _possibleConstructorReturn(this, (WebGLSampler.__proto__ || Object.getPrototypeOf(WebGLSampler)).apply(this, arguments));
    }

    return WebGLSampler;
  }(WebGLObject);

  var WebGLSync = function (_WebGLObject9) {
    _inherits(WebGLSync, _WebGLObject9);

    function WebGLSync() {
      _classCallCheck(this, WebGLSync);

      return _possibleConstructorReturn(this, (WebGLSync.__proto__ || Object.getPrototypeOf(WebGLSync)).apply(this, arguments));
    }

    return WebGLSync;
  }(WebGLObject);

  var WebGLTransformFeedback = function (_WebGLObject10) {
    _inherits(WebGLTransformFeedback, _WebGLObject10);

    function WebGLTransformFeedback() {
      _classCallCheck(this, WebGLTransformFeedback);

      return _possibleConstructorReturn(this, (WebGLTransformFeedback.__proto__ || Object.getPrototypeOf(WebGLTransformFeedback)).apply(this, arguments));
    }

    return WebGLTransformFeedback;
  }(WebGLObject);

  var WebGLVertexArrayObject = function (_WebGLObject11) {
    _inherits(WebGLVertexArrayObject, _WebGLObject11);

    function WebGLVertexArrayObject() {
      _classCallCheck(this, WebGLVertexArrayObject);

      return _possibleConstructorReturn(this, (WebGLVertexArrayObject.__proto__ || Object.getPrototypeOf(WebGLVertexArrayObject)).apply(this, arguments));
    }

    return WebGLVertexArrayObject;
  }(WebGLObject);

  var wrapMethods = function wrapMethods(gl) {
    var _getParameterTypes;

    var wrap = function wrap(methodNames, wrapper) {
      return (Array.isArray(methodNames) ? methodNames : [methodNames]).forEach(function (methodName) {
        return gl[methodName] = wrapper(gl[methodName]);
      });
    };

    var getParameterTypes = (_getParameterTypes = {}, _defineProperty(_getParameterTypes, gl.ARRAY_BUFFER_BINDING, WebGLBuffer), _defineProperty(_getParameterTypes, gl.COPY_READ_BUFFER_BINDING, WebGLBuffer), _defineProperty(_getParameterTypes, gl.COPY_WRITE_BUFFER_BINDING, WebGLBuffer), _defineProperty(_getParameterTypes, gl.CURRENT_PROGRAM, WebGLProgram), _defineProperty(_getParameterTypes, gl.DRAW_FRAMEBUFFER_BINDING, WebGLFramebuffer), _defineProperty(_getParameterTypes, gl.ELEMENT_ARRAY_BUFFER_BINDING, WebGLBuffer), _defineProperty(_getParameterTypes, gl.READ_FRAMEBUFFER_BINDING, WebGLFramebuffer), _defineProperty(_getParameterTypes, gl.RENDERBUFFER_BINDING, WebGLRenderbuffer), _defineProperty(_getParameterTypes, gl.SAMPLER_BINDING, WebGLSampler), _defineProperty(_getParameterTypes, gl.TEXTURE_BINDING_2D_ARRAY, WebGLTexture), _defineProperty(_getParameterTypes, gl.TEXTURE_BINDING_2D, WebGLTexture), _defineProperty(_getParameterTypes, gl.TEXTURE_BINDING_3D, WebGLTexture), _defineProperty(_getParameterTypes, gl.TEXTURE_BINDING_CUBE_MAP, WebGLTexture), _defineProperty(_getParameterTypes, gl.TRANSFORM_FEEDBACK_BINDING, WebGLTransformFeedback), _defineProperty(_getParameterTypes, gl.TRANSFORM_FEEDBACK_BUFFER_BINDING, WebGLBuffer), _defineProperty(_getParameterTypes, gl.UNIFORM_BUFFER_BINDING, WebGLBuffer), _defineProperty(_getParameterTypes, gl.VERTEX_ARRAY_BINDING, WebGLVertexArrayObject), _getParameterTypes);
    wrap('getParameter', function (orig) {
      return function (pname) {
        var ret = orig.call(gl, pname);

        if (pname === gl.VERSION) {
          ret = "WebGL 2.0 (Expo-" + _reactNative.Platform.OS + "-" + _Constants2.default.expoVersion + ") (" + ret + ")";
        }

        var type = getParameterTypes[pname];
        return type ? wrapObject(type, ret) : ret;
      };
    });
    wrap('bindBuffer', function (orig) {
      return function (target, buffer) {
        return orig.call(gl, target, buffer && buffer.id);
      };
    });
    wrap('createBuffer', function (orig) {
      return function () {
        return wrapObject(WebGLBuffer, orig.call(gl));
      };
    });
    wrap('deleteBuffer', function (orig) {
      return function (buffer) {
        return orig.call(gl, buffer && buffer.id);
      };
    });
    wrap('isBuffer', function (orig) {
      return function (buffer) {
        return buffer instanceof WebGLBuffer && orig.call(gl, buffer.id);
      };
    });
    wrap('bindFramebuffer', function (orig) {
      return function (target, framebuffer) {
        return orig.call(gl, target, framebuffer && framebuffer.id);
      };
    });
    wrap('createFramebuffer', function (orig) {
      return function () {
        return wrapObject(WebGLFramebuffer, orig.call(gl));
      };
    });
    wrap('deleteFramebuffer', function (orig) {
      return function (framebuffer) {
        return orig.call(gl, framebuffer && framebuffer.id);
      };
    });
    wrap('framebufferRenderbuffer', function (orig) {
      return function (target, attachment, rbtarget, rb) {
        return orig.call(gl, target, attachment, rbtarget, rb && rb.id);
      };
    });
    wrap('framebufferTexture2D', function (orig) {
      return function (target, attachment, textarget, tex, level) {
        return orig.call(gl, target, attachment, textarget, tex && tex.id, level);
      };
    });
    wrap('isFramebuffer', function (orig) {
      return function (framebuffer) {
        return framebuffer instanceof WebGLFramebuffer && orig.call(gl, framebuffer.id);
      };
    });
    wrap('framebufferTextureLayer', function (orig) {
      return function (target, attachment, texture, level, layer) {
        return orig.call(gl, target, attachment, objectId(texture), level, layer);
      };
    });
    wrap('bindRenderbuffer', function (orig) {
      return function (target, renderbuffer) {
        return orig.call(gl, target, renderbuffer && renderbuffer.id);
      };
    });
    wrap('createRenderbuffer', function (orig) {
      return function () {
        return wrapObject(WebGLRenderbuffer, orig.call(gl));
      };
    });
    wrap('deleteRenderbuffer', function (orig) {
      return function (renderbuffer) {
        return orig.call(gl, renderbuffer && renderbuffer.id);
      };
    });
    wrap('isRenderbuffer', function (orig) {
      return function (renderbuffer) {
        return renderbuffer instanceof WebGLRenderbuffer && orig.call(gl, renderbuffer.id);
      };
    });
    wrap('bindTexture', function (orig) {
      return function (target, texture) {
        return orig.call(gl, target, texture && texture.id);
      };
    });
    wrap('createTexture', function (orig) {
      return function () {
        return wrapObject(WebGLTexture, orig.call(gl));
      };
    });
    wrap('deleteTexture', function (orig) {
      return function (texture) {
        return orig.call(gl, texture && texture.id);
      };
    });
    wrap('isTexture', function (orig) {
      return function (texture) {
        return texture instanceof WebGLTexture && orig.call(gl, texture.id);
      };
    });
    wrap('attachShader', function (orig) {
      return function (program, shader) {
        return orig.call(gl, program && program.id, shader && shader.id);
      };
    });
    wrap('bindAttribLocation', function (orig) {
      return function (program, index, name) {
        return orig.call(gl, program && program.id, index, name);
      };
    });
    wrap('compileShader', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('createProgram', function (orig) {
      return function () {
        return wrapObject(WebGLProgram, orig.call(gl));
      };
    });
    wrap('createShader', function (orig) {
      return function (type) {
        return wrapObject(WebGLShader, orig.call(gl, type));
      };
    });
    wrap('deleteProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('deleteShader', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('detachShader', function (orig) {
      return function (program, shader) {
        return orig.call(gl, program && program.id, shader && shader.id);
      };
    });
    wrap('getAttachedShaders', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id).map(function (id) {
          return wrapObject(WebGLShader, id);
        });
      };
    });
    wrap('getProgramParameter', function (orig) {
      return function (program, pname) {
        return orig.call(gl, program && program.id, pname);
      };
    });
    wrap('getProgramInfoLog', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('getShaderParameter', function (orig) {
      return function (shader, pname) {
        return orig.call(gl, shader && shader.id, pname);
      };
    });
    wrap('getShaderPrecisionFormat', function (orig) {
      return function (shadertype, precisiontype) {
        return new WebGLShaderPrecisionFormat(orig.call(gl, shadertype, precisiontype));
      };
    });
    wrap('getShaderInfoLog', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('getShaderSource', function (orig) {
      return function (shader) {
        return orig.call(gl, shader && shader.id);
      };
    });
    wrap('linkProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('shaderSource', function (orig) {
      return function (shader, source) {
        return orig.call(gl, shader && shader.id, source);
      };
    });
    wrap('useProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('validateProgram', function (orig) {
      return function (program) {
        return orig.call(gl, program && program.id);
      };
    });
    wrap('isShader', function (orig) {
      return function (shader) {
        return shader instanceof WebGLShader && orig.call(gl, shader.id);
      };
    });
    wrap('isProgram', function (orig) {
      return function (program) {
        return program instanceof WebGLProgram && orig.call(gl, program.id);
      };
    });
    wrap('getFragDataLocation', function (orig) {
      return function (program) {
        return orig.call(gl, objectId(program));
      };
    });
    wrap('getActiveAttrib', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, program && program.id, index));
      };
    });
    wrap('getActiveUniform', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, program && program.id, index));
      };
    });
    wrap('getAttribLocation', function (orig) {
      return function (program, name) {
        return orig.call(gl, program && program.id, name);
      };
    });
    wrap('getUniform', function (orig) {
      return function (program, location) {
        return orig.call(gl, program && program.id, location && location.id);
      };
    });
    wrap('getUniformLocation', function (orig) {
      return function (program, name) {
        return new WebGLUniformLocation(orig.call(gl, program && program.id, name));
      };
    });
    wrap(['uniform1f', 'uniform1i', 'uniform1ui'], function (orig) {
      return function (loc, x) {
        return orig.call(gl, objectId(loc), x);
      };
    });
    wrap(['uniform2f', 'uniform2i', 'uniform2ui'], function (orig) {
      return function (loc, x, y) {
        return orig.call(gl, objectId(loc), x, y);
      };
    });
    wrap(['uniform3f', 'uniform3i', 'uniform3ui'], function (orig) {
      return function (loc, x, y, z) {
        return orig.call(gl, objectId(loc), x, y, z);
      };
    });
    wrap(['uniform4f', 'uniform4i', 'uniform4ui'], function (orig) {
      return function (loc, x, y, z, w) {
        return orig.call(gl, objectId(loc), x, y, z, w);
      };
    });
    wrap(['uniform1fv', 'uniform2fv', 'uniform3fv', 'uniform4fv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Float32Array(val));
      };
    });
    wrap(['uniform1iv', 'uniform2iv', 'uniform3iv', 'uniform4iv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Int32Array(val));
      };
    });
    wrap(['uniform1uiv', 'uniform2uiv', 'uniform3uiv', 'uniform4uiv'], function (orig) {
      return function (loc, val) {
        return orig.call(gl, objectId(loc), new Uint32Array(val));
      };
    });
    wrap(['uniformMatrix2fv', 'uniformMatrix3fv', 'uniformMatrix4fv', 'uniformMatrix3x2fv', 'uniformMatrix4x2fv', 'uniformMatrix2x3fv', 'uniformMatrix4x3fv', 'uniformMatrix2x4fv', 'uniformMatrix3x4fv'], function (orig) {
      return function (loc, transpose, val) {
        return orig.call(gl, loc && loc.id, transpose, new Float32Array(val));
      };
    });
    wrap(['vertexAttrib1fv', 'vertexAttrib2fv', 'vertexAttrib3fv', 'vertexAttrib4fv'], function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Float32Array(val));
      };
    });
    wrap('vertexAttribI4iv', function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Int32Array(val));
      };
    });
    wrap('vertexAttribI4uiv', function (orig) {
      return function (index, val) {
        return orig.call(gl, index, new Uint32Array(val));
      };
    });
    wrap('createQuery', function (orig) {
      return function () {
        return wrapObject(WebGLQuery, orig.call(gl));
      };
    });
    wrap('deleteQuery', function (orig) {
      return function (query) {
        return orig.call(gl, objectId(query));
      };
    });
    wrap('beginQuery', function (orig) {
      return function (target, query) {
        return orig.call(gl, target, objectId(query));
      };
    });
    wrap('getQuery', function (orig) {
      return function (target, pname) {
        var id = orig.call(gl, target, pname);
        return id ? wrapObject(WebGLQuery, id) : id;
      };
    });
    wrap('getQueryParameter', function (orig) {
      return function (query, pname) {
        return orig.call(gl, objectId(query), pname);
      };
    });
    wrap('bindSampler', function (orig) {
      return function (unit, sampler) {
        return orig.call(gl, unit, objectId(sampler));
      };
    });
    wrap('createSampler', function (orig) {
      return function () {
        return wrapObject(WebGLSampler, orig.call(gl));
      };
    });
    wrap('deleteSampler', function (orig) {
      return function (sampler) {
        return orig.call(gl, objectId(sampler));
      };
    });
    wrap('isSampler', function (orig) {
      return function (sampler) {
        return sampler instanceof WebGLSampler && orig.call(gl, sampler.id);
      };
    });
    wrap(['samplerParameteri', 'samplerParameterf'], function (orig) {
      return function (sampler, pname, param) {
        return orig.call(gl, objectId(sampler), pname, param);
      };
    });
    wrap('getSamplerParameter', function (orig) {
      return function (sampler, pname) {
        return orig.call(gl, objectId(sampler), pname);
      };
    });
    wrap('bindTransformFeedback', function (orig) {
      return function (target, transformFeedback) {
        return orig.call(gl, target, objectId(transformFeedback));
      };
    });
    wrap('createTransformFeedback', function (orig) {
      return function () {
        return wrapObject(WebGLTransformFeedback, orig.call(gl));
      };
    });
    wrap('deleteTransformFeedback', function (orig) {
      return function (transformFeedback) {
        return orig.call(gl, objectId(transformFeedback));
      };
    });
    wrap('transformFeedbackVaryings', function (orig) {
      return function (program, varyings, bufferMode) {
        return orig.call(gl, objectId(program), varyings, bufferMode);
      };
    });
    wrap('getTransformFeedbackVarying', function (orig) {
      return function (program, index) {
        return new WebGLActiveInfo(orig.call(gl, objectId(program), index));
      };
    });
    wrap(['bindBufferBase', 'bindBufferRange'], function (orig) {
      return function (target, index, buffer) {
        for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
          rest[_key2 - 3] = arguments[_key2];
        }

        return orig.call.apply(orig, [gl, target, index, objectId(buffer)].concat(rest));
      };
    });
    wrap('getUniformIndices', function (orig) {
      return function (program, uniformNames) {
        var uintArray = orig.call(gl, objectId(program), uniformNames);
        return Array.from(uintArray);
      };
    });
    wrap('getActiveUniforms', function (orig) {
      return function (program, uniformIndices, pname) {
        var intArray = orig.call(gl, objectId(program), new Uint32Array(uniformIndices), pname);
        var boolResult = pname === gl.UNIFORM_IS_ROW_MAJOR;
        var arr = Array.from(intArray);
        return boolResult ? arr.map(function (val) {
          return !!val;
        }) : arr;
      };
    });
    wrap('getUniformBlockIndex', function (orig) {
      return function (program, uniformBlockName) {
        return orig.call(gl, objectId(program), uniformBlockName);
      };
    });
    wrap('getActiveUniformBlockName', function (orig) {
      return function (program, uniformBlockIndex) {
        return orig.call(gl, objectId(program), uniformBlockIndex);
      };
    });
    wrap('uniformBlockBinding', function (orig) {
      return function (program, uniformBlockIndex, uniformBlockBinding) {
        return orig.call(gl, objectId(program), uniformBlockIndex, uniformBlockBinding);
      };
    });
    wrap('bindVertexArray', function (orig) {
      return function (vertexArray) {
        return orig.call(gl, vertexArray && vertexArray.id);
      };
    });
    wrap('createVertexArray', function (orig) {
      return function () {
        return wrapObject(WebGLVertexArrayObject, orig.call(gl));
      };
    });
    wrap('deleteVertexArray', function (orig) {
      return function (vertexArray) {
        return orig.call(gl, vertexArray && vertexArray.id);
      };
    });
    wrap('isVertexArray', function (orig) {
      return function (vertexArray) {
        return vertexArray instanceof WebGLVertexArrayObject && orig.call(gl, vertexArray.id);
      };
    });
  };

  var getGl = function getGl(exglCtxId) {
    var gl = global.__EXGLContexts[exglCtxId];
    gl.__exglCtxId = exglCtxId;
    delete global.__EXGLContexts[exglCtxId];
    var glesVersion = gl.getParameter(gl.VERSION);
    var supportsWebGL2 = parseFloat(glesVersion.split(/[^\d.]+/g).join(' ')) >= 3.0;
    var prototype = supportsWebGL2 ? global.WebGL2RenderingContext.prototype : global.WebGLRenderingContext.prototype;

    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(gl, prototype);
    } else {
      gl.__proto__ = prototype;
    }

    wrapMethods(gl);
    gl.canvas = null;
    var viewport = gl.getParameter(gl.VIEWPORT);
    gl.drawingBufferWidth = viewport[2];
    gl.drawingBufferHeight = viewport[3];
    var enableLogging = false;
    Object.defineProperty(gl, 'enableLogging', {
      configurable: true,
      get: function get() {
        return enableLogging;
      },
      set: function set(enable) {
        if (enable === enableLogging) {
          return;
        }

        if (enable) {
          Object.keys(gl).forEach(function (key) {
            if (typeof gl[key] === 'function') {
              var original = gl[key];

              gl[key] = function () {
                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                console.log("EXGL: " + key + "(" + args.join(', ') + ")");
                var r = original.apply(gl, args);
                console.log("EXGL:    = " + r);
                return r;
              };

              gl[key].original = original;
            }
          });
        } else {
          Object.keys(gl).forEach(function (key) {
            if (typeof gl[key] === 'function' && gl[key].original) {
              gl[key] = gl[key].original;
            }
          });
        }

        enableLogging = enable;
      }
    });
    return gl;
  };

  var getContextId = function getContextId(exgl) {
    var exglCtxId = exgl && typeof exgl === 'object' ? exgl.__exglCtxId : exgl;

    if (!exglCtxId || typeof exglCtxId !== 'number') {
      throw new Error("Invalid EXGLContext id: " + String(exglCtxId));
    }

    return exglCtxId;
  };

  global.WebGLRenderingContext = WebGLRenderingContext;
  global.WebGL2RenderingContext = WebGL2RenderingContext;
  global.WebGLObject = WebGLObject;
  global.WebGLBuffer = WebGLBuffer;
  global.WebGLFramebuffer = WebGLFramebuffer;
  global.WebGLProgram = WebGLProgram;
  global.WebGLRenderbuffer = WebGLRenderbuffer;
  global.WebGLShader = WebGLShader;
  global.WebGLTexture = WebGLTexture;
  global.WebGLUniformLocation = WebGLUniformLocation;
  global.WebGLActiveInfo = WebGLActiveInfo;
  global.WebGLShaderPrecisionFormat = WebGLShaderPrecisionFormat;
  global.WebGLQuery = WebGLQuery;
  global.WebGLSampler = WebGLSampler;
  global.WebGLSync = WebGLSync;
  global.WebGLTransformFeedback = WebGLTransformFeedback;
  global.WebGLVertexArrayObject = WebGLVertexArrayObject;
});