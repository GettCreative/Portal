__d(function (global, _require, module, exports, _dependencyMap) {
  var SetCache = _require(_dependencyMap[0], './_SetCache'),
      arrayIncludes = _require(_dependencyMap[1], './_arrayIncludes'),
      arrayIncludesWith = _require(_dependencyMap[2], './_arrayIncludesWith'),
      arrayMap = _require(_dependencyMap[3], './_arrayMap'),
      baseUnary = _require(_dependencyMap[4], './_baseUnary'),
      cacheHas = _require(_dependencyMap[5], './_cacheHas');

  var LARGE_ARRAY_SIZE = 200;

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }

    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  module.exports = baseDifference;
});