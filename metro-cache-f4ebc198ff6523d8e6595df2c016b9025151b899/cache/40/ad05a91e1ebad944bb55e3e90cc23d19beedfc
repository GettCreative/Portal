__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Recording = exports.RECORDING_OPTIONS_PRESET_LOW_QUALITY = exports.RECORDING_OPTIONS_PRESET_HIGH_QUALITY = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = undefined;

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _AV = _require(_dependencyMap[1], "../AV");

  var _Audio = _require(_dependencyMap[2], "../Audio");

  var _Sound = _require(_dependencyMap[3], "./Sound");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_DEFAULT = 0;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP = 1;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4 = 2;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_NB = 3;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AMR_WB = 4;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADIF = 5;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_AAC_ADTS = 6;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_RTP_AVP = 7;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG2TS = 8;
  var RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = exports.RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_WEBM = 9;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_DEFAULT = 0;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB = 1;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_WB = 2;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC = 3;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_HE_AAC = 4;
  var RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = exports.RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC_ELD = 5;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_LINEARPCM = 'lpcm';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AC3 = 'ac-3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_60958AC3 = 'cac3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLEIMA4 = 'ima4';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC = 'aac ';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4CELP = 'celp';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4HVXC = 'hvxc';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4TWINVQ = 'twvq';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE3 = 'MAC3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MACE6 = 'MAC6';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ULAW = 'ulaw';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ALAW = 'alaw';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN = 'QDMC';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QDESIGN2 = 'QDM2';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_QUALCOMM = 'Qclp';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER1 = '.mp1';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER2 = '.mp2';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEGLAYER3 = '.mp3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_APPLELOSSLESS = 'alac';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE = 'aach';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_LD = 'aacl';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD = 'aace';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_SBR = 'aacf';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_ELD_V2 = 'aacg';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_HE_V2 = 'aacp';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MPEG4AAC_SPATIAL = 'aacs';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR = 'samr';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AMR_WB = 'sawb';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AUDIBLE = 'AUDB';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ILBC = 'ilbc';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_DVIINTELIMA = 0x6d730011;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_MICROSOFTGSM = 0x6d730031;
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_AES3 = 'aes3';
  var RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = exports.RECORDING_OPTION_IOS_OUTPUT_FORMAT_ENHANCEDAC3 = 'ec-3';
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN = 0;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_LOW = 0x20;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MEDIUM = 0x40;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_HIGH = 0x60;
  var RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = exports.RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX = 0x7f;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_CONSTANT = 0;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_LONG_TERM_AVERAGE = 1;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE_CONSTRAINED = 2;
  var RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = exports.RECORDING_OPTION_IOS_BIT_RATE_STRATEGY_VARIABLE = 3;
  var RECORDING_OPTIONS_PRESET_HIGH_QUALITY = exports.RECORDING_OPTIONS_PRESET_HIGH_QUALITY = {
    android: {
      extension: '.m4a',
      outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_MPEG_4,
      audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AAC,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000
    },
    ios: {
      extension: '.caf',
      audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MAX,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000,
      linearPCMBitDepth: 16,
      linearPCMIsBigEndian: false,
      linearPCMIsFloat: false
    }
  };
  var RECORDING_OPTIONS_PRESET_LOW_QUALITY = exports.RECORDING_OPTIONS_PRESET_LOW_QUALITY = {
    android: {
      extension: '.3gp',
      outputFormat: RECORDING_OPTION_ANDROID_OUTPUT_FORMAT_THREE_GPP,
      audioEncoder: RECORDING_OPTION_ANDROID_AUDIO_ENCODER_AMR_NB,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000
    },
    ios: {
      extension: '.caf',
      audioQuality: RECORDING_OPTION_IOS_AUDIO_QUALITY_MIN,
      sampleRate: 44100,
      numberOfChannels: 2,
      bitRate: 128000,
      linearPCMBitDepth: 16,
      linearPCMIsBigEndian: false,
      linearPCMIsFloat: false
    }
  };
  var _recorderExists = false;

  var Recording = exports.Recording = function () {
    function Recording() {
      var _this = this;

      _classCallCheck(this, Recording);

      this._cleanupForUnloadedRecorder = function _callee(finalStatus) {
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this._canRecord = false;
                _this._isDoneRecording = true;
                _this._finalDurationMillis = finalStatus.durationMillis;
                _recorderExists = false;

                if (_reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording) {
                  _reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording(null);
                }

                _this._disablePolling();

                _context.next = 8;
                return regeneratorRuntime.awrap(_this.getStatusAsync());

              case 8:
                return _context.abrupt("return", _context.sent);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this);
      };

      this._pollingLoop = function _callee2() {
        return regeneratorRuntime.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!((0, _Audio._isAudioEnabled)() && _this._canRecord && _this._onRecordingStatusUpdate != null)) {
                  _context2.next = 10;
                  break;
                }

                _this._progressUpdateTimeoutVariable = setTimeout(_this._pollingLoop, _this._progressUpdateIntervalMillis);
                _context2.prev = 2;
                _context2.next = 5;
                return regeneratorRuntime.awrap(_this.getStatusAsync());

              case 5:
                _context2.next = 10;
                break;

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](2);

                _this._disablePolling();

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, null, _this, [[2, 7]]);
      };

      this.getStatusAsync = function _callee3() {
        var status;
        return regeneratorRuntime.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!_this._canRecord) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", _this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.getAudioRecordingStatus();
                }));

              case 2:
                status = _this._isDoneRecording ? {
                  canRecord: false,
                  isDoneRecording: true,
                  durationMillis: _this._finalDurationMillis
                } : {
                  canRecord: false,
                  isDoneRecording: false
                };

                _this._callOnRecordingStatusUpdateForNewStatus(status);

                return _context3.abrupt("return", status);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, null, _this);
      };

      this._canRecord = false;
      this._isDoneRecording = false;
      this._finalDurationMillis = 0;
      this._uri = null;
      this._progressUpdateTimeoutVariable = null;
      this._progressUpdateIntervalMillis = _AV._DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS;
      this._options = null;
    }

    _createClass(Recording, [{
      key: "_disablePolling",
      value: function _disablePolling() {
        if (this._progressUpdateTimeoutVariable != null) {
          clearTimeout(this._progressUpdateTimeoutVariable);
          this._progressUpdateTimeoutVariable = null;
        }
      }
    }, {
      key: "_enablePollingIfNecessaryAndPossible",
      value: function _enablePollingIfNecessaryAndPossible() {
        if ((0, _Audio._isAudioEnabled)() && this._canRecord && this._onRecordingStatusUpdate != null) {
          this._disablePolling();

          this._pollingLoop();
        }
      }
    }, {
      key: "_callOnRecordingStatusUpdateForNewStatus",
      value: function _callOnRecordingStatusUpdateForNewStatus(status) {
        if (this._onRecordingStatusUpdate != null) {
          this._onRecordingStatusUpdate(status);
        }
      }
    }, {
      key: "_performOperationAndHandleStatusAsync",
      value: function _performOperationAndHandleStatusAsync(operation) {
        var _status;

        return regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                (0, _Audio._throwIfAudioIsDisabled)();

                if (!this._canRecord) {
                  _context4.next = 9;
                  break;
                }

                _context4.next = 4;
                return regeneratorRuntime.awrap(operation());

              case 4:
                _status = _context4.sent;

                this._callOnRecordingStatusUpdateForNewStatus(_status);

                return _context4.abrupt("return", _status);

              case 9:
                throw new Error('Cannot complete operation because this recorder is not ready to record.');

              case 10:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "setOnRecordingStatusUpdate",
      value: function setOnRecordingStatusUpdate(onRecordingStatusUpdate) {
        this._onRecordingStatusUpdate = onRecordingStatusUpdate;

        if (onRecordingStatusUpdate == null) {
          this._disablePolling();
        } else {
          this._enablePollingIfNecessaryAndPossible();
        }

        this.getStatusAsync();
      }
    }, {
      key: "setProgressUpdateInterval",
      value: function setProgressUpdateInterval(progressUpdateIntervalMillis) {
        this._progressUpdateIntervalMillis = progressUpdateIntervalMillis;
        this.getStatusAsync();
      }
    }, {
      key: "prepareToRecordAsync",
      value: function prepareToRecordAsync() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RECORDING_OPTIONS_PRESET_LOW_QUALITY;

        var extensionRegex, _ref, uri, _status2;

        return regeneratorRuntime.async(function prepareToRecordAsync$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _Audio._throwIfAudioIsDisabled)();

                if (!_recorderExists) {
                  _context5.next = 3;
                  break;
                }

                throw new Error('Only one Recording object can be prepared at a given time.');

              case 3:
                if (!this._isDoneRecording) {
                  _context5.next = 5;
                  break;
                }

                throw new Error('This Recording object is done recording; you must make a new one.');

              case 5:
                if (!(!options || !options.android || !options.ios)) {
                  _context5.next = 7;
                  break;
                }

                throw new Error('You must provide recording options for android and ios in order to prepare to record.');

              case 7:
                extensionRegex = /^\.\w+$/;

                if (!(!options.android.extension || !options.ios.extension || !extensionRegex.test(options.android.extension) || !extensionRegex.test(options.ios.extension))) {
                  _context5.next = 10;
                  break;
                }

                throw new Error("Your file extensions must match " + extensionRegex.toString() + ".");

              case 10:
                if (this._canRecord) {
                  _context5.next = 26;
                  break;
                }

                if (_reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording) {
                  _reactNative.NativeModules.ExponentAV.setUnloadedCallbackForAndroidRecording(this._cleanupForUnloadedRecorder);
                }

                _context5.next = 14;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.prepareAudioRecorder(options));

              case 14:
                _ref = _context5.sent;
                uri = _ref.uri;
                _status2 = _ref.status;
                _recorderExists = true;
                this._uri = uri;
                this._options = options;
                this._canRecord = true;

                this._callOnRecordingStatusUpdateForNewStatus(_status2);

                this._enablePollingIfNecessaryAndPossible();

                return _context5.abrupt("return", _status2);

              case 26:
                throw new Error('This Recording object is already prepared to record.');

              case 27:
              case "end":
                return _context5.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "startAsync",
      value: function startAsync() {
        return regeneratorRuntime.async(function startAsync$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.startAudioRecording();
                }));

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "pauseAsync",
      value: function pauseAsync() {
        return regeneratorRuntime.async(function pauseAsync$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.pauseAudioRecording();
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "stopAndUnloadAsync",
      value: function stopAndUnloadAsync() {
        var finalStatus;
        return regeneratorRuntime.async(function stopAndUnloadAsync$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (this._canRecord) {
                  _context8.next = 6;
                  break;
                }

                if (!this._isDoneRecording) {
                  _context8.next = 5;
                  break;
                }

                throw new Error('Cannot unload a Recording that has already been unloaded.');

              case 5:
                throw new Error('Cannot unload a Recording that has not been prepared.');

              case 6:
                _context8.next = 8;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.stopAudioRecording());

              case 8:
                finalStatus = _context8.sent;
                _context8.next = 11;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.unloadAudioRecorder());

              case 11:
                return _context8.abrupt("return", this._cleanupForUnloadedRecorder(finalStatus));

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "getURI",
      value: function getURI() {
        return this._uri;
      }
    }, {
      key: "createNewLoadedSound",
      value: function createNewLoadedSound() {
        var initialStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var onPlaybackStatusUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        return regeneratorRuntime.async(function createNewLoadedSound$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(this._uri == null || !this._isDoneRecording)) {
                  _context9.next = 2;
                  break;
                }

                throw new Error('Cannot create sound when the Recording has not finished!');

              case 2:
                return _context9.abrupt("return", _Sound.Sound.create({
                  uri: this._uri
                }, initialStatus, onPlaybackStatusUpdate, false));

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, null, this);
      }
    }]);

    return Recording;
  }();
});