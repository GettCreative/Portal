__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = undefined;

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/home/nooreddein/Desktop/Portal/node_modules/expo/src/av/Video.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _lodash = _require(_dependencyMap[3], "lodash.omit");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _reactNative = _require(_dependencyMap[4], "react-native");

  var _AV = _require(_dependencyMap[5], "./AV");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Video: {
      displayName: "Video"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/nooreddein/Desktop/Portal/node_modules/expo/src/av/Video.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;
  var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;
  var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;
  var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;
  var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;
  var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;
  var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;
  var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = exports.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;

  var _STYLES = _reactNative.StyleSheet.create({
    base: {
      overflow: 'hidden'
    },
    poster: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      resizeMode: 'contain'
    },
    video: {
      position: 'absolute',
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    }
  });

  var ExpoVideoManagerConstants = _reactNative.NativeModules.UIManager.ExponentVideo ? _reactNative.NativeModules.UIManager.ExponentVideo.Constants : _reactNative.NativeModules.ExponentVideoManager;

  var Video = _wrapComponent("Video")((_temp = _class = function (_Component) {
    _inherits(Video, _Component);

    function Video(props) {
      var _this2 = this;

      _classCallCheck(this, Video);

      var _this = _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).call(this, props));

      _this._assignRoot = function (component) {
        _this._root = component;
      };

      _this._handleNewStatus = function (status) {
        if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {
          _this.setState({
            showPoster: false
          });
        }

        if (_this.props.onPlaybackStatusUpdate) {
          _this.props.onPlaybackStatusUpdate(status);
        }
      };

      _this._performOperationAndHandleStatusAsync = function _callee(operation) {
        var _status;

        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this._root) {
                  _context.next = 8;
                  break;
                }

                _context.next = 3;
                return regeneratorRuntime.awrap(operation((0, _reactNative.findNodeHandle)(_this._root)));

              case 3:
                _status = _context.sent;

                _this._handleNewStatus(_status);

                return _context.abrupt("return", _status);

              case 8:
                throw new Error('Cannot complete operation because the Video component has not yet loaded.');

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this2);
      };

      _this._setFullscreen = function _callee2(value) {
        return regeneratorRuntime.async(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentVideoManager.setFullscreen(tag, value);
                }));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, null, _this2);
      };

      _this.presentFullscreenPlayer = function _callee3() {
        return regeneratorRuntime.async(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", _this._setFullscreen(true));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, null, _this2);
      };

      _this.presentIOSFullscreenPlayer = function () {
        console.warn("You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.");
        return _this.presentFullscreenPlayer();
      };

      _this.presentFullscreenPlayerAsync = function () {
        return _this._performOperationAndHandleStatusAsync(function (tag) {
          return _reactNative.NativeModules.ExponentAV.presentFullscreenPlayer(tag);
        });
      };

      _this.dismissFullscreenPlayer = function _callee4() {
        return regeneratorRuntime.async(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", _this._setFullscreen(false));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, null, _this2);
      };

      _this.dismissIOSFullscreenPlayer = function () {
        console.warn("You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.");

        _this.dismissFullscreenPlayer();
      };

      _this.getStatusAsync = function _callee5() {
        return regeneratorRuntime.async(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.getStatusForVideo(tag);
                }));

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, null, _this2);
      };

      _this.setOnPlaybackStatusUpdate = function (onPlaybackStatusUpdate) {
        _this.setNativeProps({
          onPlaybackStatusUpdate: onPlaybackStatusUpdate
        });

        _this.getStatusAsync();
      };

      _this.loadAsync = function _callee6(source) {
        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var _ref, nativeSource, fullInitialStatus;

        return regeneratorRuntime.async(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return regeneratorRuntime.awrap((0, _AV._getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst));

              case 2:
                _ref = _context6.sent;
                nativeSource = _ref.nativeSource;
                fullInitialStatus = _ref.fullInitialStatus;
                return _context6.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);
                }));

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, null, _this2);
      };

      _this.unloadAsync = function _callee7() {
        return regeneratorRuntime.async(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.unloadForVideo(tag);
                }));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, null, _this2);
      };

      _this.setStatusAsync = function _callee8(status) {
        return regeneratorRuntime.async(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                (0, _AV._throwErrorIfValuesOutOfBoundsInStatus)(status);
                return _context8.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.setStatusForVideo(tag, status);
                }));

              case 2:
              case "end":
                return _context8.stop();
            }
          }
        }, null, _this2);
      };

      _this.replayAsync = function _callee9() {
        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return regeneratorRuntime.async(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!(status.positionMillis && status.positionMillis !== 0)) {
                  _context9.next = 2;
                  break;
                }

                throw new Error('Requested position after replay has to be 0.');

              case 2:
                return _context9.abrupt("return", _this._performOperationAndHandleStatusAsync(function (tag) {
                  return _reactNative.NativeModules.ExponentAV.replayVideo(tag, _extends({}, status, {
                    positionMillis: 0,
                    shouldPlay: true
                  }));
                }));

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, null, _this2);
      };

      _this._nativeOnPlaybackStatusUpdate = function (event) {
        _this._handleNewStatus(event.nativeEvent);
      };

      _this._nativeOnLoadStart = function (event) {
        if (_this.props.onLoadStart) {
          _this.props.onLoadStart();
        }
      };

      _this._nativeOnLoad = function (event) {
        if (_this.props.onLoad) {
          _this.props.onLoad(event.nativeEvent);
        }

        _this._handleNewStatus(event.nativeEvent);
      };

      _this._nativeOnError = function (event) {
        var error = event.nativeEvent.error;

        if (_this.props.onError) {
          _this.props.onError(error);
        }

        _this._handleNewStatus((0, _AV._getUnloadedStatus)(error));
      };

      _this._nativeOnReadyForDisplay = function (event) {
        if (_this.props.onReadyForDisplay) {
          _this.props.onReadyForDisplay(event.nativeEvent);
        }
      };

      _this._nativeOnFullscreenUpdate = function (event) {
        if (_this.props.onIOSFullscreenUpdate && _this.props.onFullscreenUpdate) {
          console.warn("You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.");
        } else if (_this.props.onIOSFullscreenUpdate) {
          console.warn("You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.");
        }

        if (_this.props.onIOSFullscreenUpdate) {
          _this.props.onIOSFullscreenUpdate(event.nativeEvent);
        }

        if (_this.props.onFullscreenUpdate) {
          _this.props.onFullscreenUpdate(event.nativeEvent);
        }
      };

      _this._renderPoster = function () {
        return _this.props.usePoster && _this.state.showPoster ? _react3.default.createElement(_reactNative.Image, {
          style: _STYLES.poster,
          source: _this.props.posterSource,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 372
          }
        }) : null;
      };

      _this.state = {
        showPoster: props.usePoster != null && props.usePoster
      };
      return _this;
    }

    _createClass(Video, [{
      key: "setNativeProps",
      value: function setNativeProps(nativeProps) {
        this._root.setNativeProps(nativeProps);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var source = (0, _AV._getNativeSourceFromSource)(this.props.source);
        var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;

        if (this.props.resizeMode) {
          var _resizeMode = this.props.resizeMode;

          if (_resizeMode === Video.RESIZE_MODE_STRETCH) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;
          } else if (_resizeMode === Video.RESIZE_MODE_CONTAIN) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;
          } else if (_resizeMode === Video.RESIZE_MODE_COVER) {
            nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;
          }
        }

        var status = _extends({}, this.props.status);

        ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {
          if (prop in _this3.props) {
            status[prop] = _this3.props[prop];
          }
        });

        var nativeProps = _extends({
          style: _STYLES.base
        }, (0, _lodash2.default)(this.props, 'source'), {
          source: source,
          nativeResizeMode: nativeResizeMode,
          status: status,
          onStatusUpdateNative: this._nativeOnPlaybackStatusUpdate,
          onLoadStartNative: this._nativeOnLoadStart,
          onLoadNative: this._nativeOnLoad,
          onErrorNative: this._nativeOnError,
          onReadyForDisplayNative: this._nativeOnReadyForDisplay,
          onFullscreenUpdateNative: this._nativeOnFullscreenUpdate
        });

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: nativeProps.style,
            pointerEvents: "box-none",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 423
            }
          },
          _react3.default.createElement(ExponentVideo, _extends({
            ref: this._assignRoot
          }, nativeProps, {
            style: _STYLES.video,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 424
            }
          })),
          this._renderPoster()
        );
      }
    }]);

    return Video;
  }(_react2.Component), _class.RESIZE_MODE_CONTAIN = 'contain', _class.RESIZE_MODE_COVER = 'cover', _class.RESIZE_MODE_STRETCH = 'stretch', _class.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT, _class.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT, _class.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS, _class.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS, _class.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT, _class.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT, _class.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS, _class.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS, _temp));

  exports.default = Video;

  _extends(Video.prototype, _AV._COMMON_AV_PLAYBACK_METHODS);

  Video.propTypes = _extends({
    source: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      uri: _propTypes2.default.string,
      overrideFileExtensionAndroid: _propTypes2.default.string
    }), _propTypes2.default.number]),
    posterSource: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      uri: _propTypes2.default.string
    }), _propTypes2.default.number]),
    onPlaybackStatusUpdate: _propTypes2.default.func,
    onLoadStart: _propTypes2.default.func,
    onLoad: _propTypes2.default.func,
    onError: _propTypes2.default.func,
    onIOSFullscreenUpdate: _propTypes2.default.func,
    onFullscreenUpdate: _propTypes2.default.func,
    onReadyForDisplay: _propTypes2.default.func,
    useNativeControls: _propTypes2.default.bool,
    resizeMode: _propTypes2.default.string,
    usePoster: _propTypes2.default.bool,
    status: _propTypes2.default.shape({
      progressUpdateIntervalMillis: _propTypes2.default.number,
      positionMillis: _propTypes2.default.number,
      shouldPlay: _propTypes2.default.bool,
      rate: _propTypes2.default.number,
      shouldCorrectPitch: _propTypes2.default.bool,
      volume: _propTypes2.default.number,
      isMuted: _propTypes2.default.bool,
      isLooping: _propTypes2.default.bool
    }),
    progressUpdateIntervalMillis: _propTypes2.default.number,
    positionMillis: _propTypes2.default.number,
    shouldPlay: _propTypes2.default.bool,
    rate: _propTypes2.default.number,
    shouldCorrectPitch: _propTypes2.default.bool,
    volume: _propTypes2.default.number,
    isMuted: _propTypes2.default.bool,
    isLooping: _propTypes2.default.bool,
    scaleX: _propTypes2.default.number,
    scaleY: _propTypes2.default.number,
    translateX: _propTypes2.default.number,
    translateY: _propTypes2.default.number,
    rotation: _propTypes2.default.number
  }, _reactNative.ViewPropTypes);
  var ExponentVideo = (0, _reactNative.requireNativeComponent)('ExponentVideo', Video, {
    nativeOnly: {
      source: true,
      nativeResizeMode: true,
      onStatusUpdateNative: true,
      onLoadStartNative: true,
      onLoadNative: true,
      onErrorNative: true,
      onReadyForDisplayNative: true,
      onFullscreenUpdateNative: true
    }
  });
});