__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var EventEmitter = _require(_dependencyMap[0], 'eventemitter3');

  var MetroClient = function (_EventEmitter) {
    _inherits(MetroClient, _EventEmitter);

    function MetroClient(url) {
      _classCallCheck(this, MetroClient);

      var _this = _possibleConstructorReturn(this, (MetroClient.__proto__ || Object.getPrototypeOf(MetroClient)).call(this));

      _this._url = url;
      return _this;
    }

    _createClass(MetroClient, [{
      key: "enable",
      value: function enable() {
        var _this2 = this;

        if (this._ws) {
          this.disable();
        }

        this._ws = new global.WebSocket(this._url);

        this._ws.onerror = function (error) {
          _this2.emit('connection-error', error);
        };

        this._ws.onclose = function () {
          _this2.emit('close');
        };

        this._ws.onmessage = function (message) {
          var data = JSON.parse(message.data);

          switch (data.type) {
            case 'update-start':
              _this2.emit('update-start');

              break;

            case 'update':
              var _data$body = data.body;
              var modules = _data$body.modules,
                  sourceMappingURLs = _data$body.sourceMappingURLs,
                  sourceURLs = _data$body.sourceURLs;

              _this2.emit('update');

              modules.forEach(function (_ref, i) {
                var id = _ref.id,
                    code = _ref.code;
                code += '\n\n' + sourceMappingURLs[i];
                var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;
                injectFunction(code, sourceURLs[i]);
              });
              break;

            case 'update-done':
              _this2.emit('update-done');

              break;

            case 'error':
              _this2.emit('error', data.body);

              break;

            default:
              _this2.emit('error', {
                type: 'unknown-message',
                message: data
              });

          }
        };
      }
    }, {
      key: "disable",
      value: function disable() {
        if (this._ws) {
          this._ws.close();

          this._ws = undefined;
        }
      }
    }]);

    return MetroClient;
  }(EventEmitter);

  module.exports = MetroClient;
});