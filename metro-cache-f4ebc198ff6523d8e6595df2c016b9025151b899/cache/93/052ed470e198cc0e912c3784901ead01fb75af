__d(function (global, _require, module, exports, _dependencyMap) {
  "use strict";

  var GrammarError = _require(_dependencyMap[0], "../../grammar-error"),
      arrays = _require(_dependencyMap[1], "../../utils/arrays"),
      objects = _require(_dependencyMap[2], "../../utils/objects"),
      visitor = _require(_dependencyMap[3], "../visitor");

  function reportDuplicateLabels(ast) {
    function checkExpressionWithClonedEnv(node, env) {
      check(node.expression, objects.clone(env));
    }

    var check = visitor.build({
      rule: function rule(node) {
        check(node.expression, {});
      },
      choice: function choice(node, env) {
        arrays.each(node.alternatives, function (alternative) {
          check(alternative, objects.clone(env));
        });
      },
      action: checkExpressionWithClonedEnv,
      labeled: function labeled(node, env) {
        if (env.hasOwnProperty(node.label)) {
          throw new GrammarError("Label \"" + node.label + "\" is already defined " + "at line " + env[node.label].start.line + ", " + "column " + env[node.label].start.column + ".", node.location);
        }

        check(node.expression, env);
        env[node.label] = node.location;
      },
      text: checkExpressionWithClonedEnv,
      simple_and: checkExpressionWithClonedEnv,
      simple_not: checkExpressionWithClonedEnv,
      optional: checkExpressionWithClonedEnv,
      zero_or_more: checkExpressionWithClonedEnv,
      one_or_more: checkExpressionWithClonedEnv,
      group: checkExpressionWithClonedEnv
    });
    check(ast);
  }

  module.exports = reportDuplicateLabels;
});