__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Sound = undefined;

  var _this5 = this;

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _AV = _require(_dependencyMap[1], "../AV");

  var _Audio = _require(_dependencyMap[2], "../Audio");

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Sound = exports.Sound = function () {
    function Sound() {
      var _this = this;

      _classCallCheck(this, Sound);

      this._internalStatusUpdateCallback = function (_ref) {
        var key = _ref.key,
            status = _ref.status;

        if (_this._key === key) {
          _this._callOnPlaybackStatusUpdateForNewStatus(status);
        }
      };

      this._errorCallback = function (error) {
        _this._clearSubscriptions();

        _this._loaded = false;
        _this._key = -1;

        _this._callOnPlaybackStatusUpdateForNewStatus((0, _AV._getUnloadedStatus)(error));
      };

      this.getStatusAsync = function _callee() {
        var status;
        return regeneratorRuntime.async(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_this._loaded) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", _this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.getStatusForSound(_this._key);
                }));

              case 2:
                status = (0, _AV._getUnloadedStatus)();

                _this._callOnPlaybackStatusUpdateForNewStatus(status);

                return _context.abrupt("return", status);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, _this);
      };

      this._loaded = false;
      this._loading = false;
      this._key = -1;
      this._subscriptions = [];
      this._lastStatusUpdate = null;
      this._lastStatusUpdateTime = null;
      this._onPlaybackStatusUpdate = null;
      this._coalesceStatusUpdatesInMillis = 100;
      this._eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.ExponentAV);
    }

    _createClass(Sound, [{
      key: "_callOnPlaybackStatusUpdateForNewStatus",
      value: function _callOnPlaybackStatusUpdateForNewStatus(status) {
        var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && new Date() - this._lastStatusUpdateTime < this._coalesceStatusUpdatesInMillis;

        if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {
          this._onPlaybackStatusUpdate(status);

          this._lastStatusUpdateTime = new Date();
          this._lastStatusUpdate = JSON.stringify(status);
        }
      }
    }, {
      key: "_performOperationAndHandleStatusAsync",
      value: function _performOperationAndHandleStatusAsync(operation) {
        var _status;

        return regeneratorRuntime.async(function _performOperationAndHandleStatusAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                (0, _Audio._throwIfAudioIsDisabled)();

                if (!this._loaded) {
                  _context2.next = 9;
                  break;
                }

                _context2.next = 4;
                return regeneratorRuntime.awrap(operation());

              case 4:
                _status = _context2.sent;

                this._callOnPlaybackStatusUpdateForNewStatus(_status);

                return _context2.abrupt("return", _status);

              case 9:
                throw new Error('Cannot complete operation because sound is not loaded.');

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "_subscribeToNativeStatusUpdateEvents",
      value: function _subscribeToNativeStatusUpdateEvents() {
        if (this._loaded) {
          this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));
        }
      }
    }, {
      key: "_clearSubscriptions",
      value: function _clearSubscriptions() {
        this._subscriptions.forEach(function (e) {
          return e.remove();
        });

        this._subscriptions = [];
      }
    }, {
      key: "setOnPlaybackStatusUpdate",
      value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {
        this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;
        this.getStatusAsync();
      }
    }, {
      key: "loadAsync",
      value: function loadAsync(source) {
        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

        var _ref2, nativeSource, fullInitialStatus;

        return regeneratorRuntime.async(function loadAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                (0, _Audio._throwIfAudioIsDisabled)();

                if (!this._loading) {
                  _context3.next = 3;
                  break;
                }

                throw new Error('The Sound is already loading.');

              case 3:
                if (this._loaded) {
                  _context3.next = 13;
                  break;
                }

                this._loading = true;
                _context3.next = 7;
                return regeneratorRuntime.awrap((0, _AV._getNativeSourceAndFullInitialStatusForLoadAsync)(source, initialStatus, downloadFirst));

              case 7:
                _ref2 = _context3.sent;
                nativeSource = _ref2.nativeSource;
                fullInitialStatus = _ref2.fullInitialStatus;
                return _context3.abrupt("return", new Promise(function (resolve, reject) {
                  var _this2 = this;

                  var loadSuccess = function loadSuccess(key, status) {
                    _this2._key = key;
                    _this2._loaded = true;
                    _this2._loading = false;

                    _reactNative.NativeModules.ExponentAV.setErrorCallbackForSound(_this2._key, _this2._errorCallback);

                    _this2._subscribeToNativeStatusUpdateEvents();

                    _this2._callOnPlaybackStatusUpdateForNewStatus(status);

                    resolve(status);
                  };

                  var loadError = function loadError(error) {
                    _this2._loading = false;
                    reject(new Error(error));
                  };

                  _reactNative.NativeModules.ExponentAV.loadForSound(nativeSource, fullInitialStatus, loadSuccess, loadError);
                }.bind(this)));

              case 13:
                throw new Error('The Sound is already loaded.');

              case 14:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "unloadAsync",
      value: function unloadAsync() {
        var key, _status2;

        return regeneratorRuntime.async(function unloadAsync$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!this._loaded) {
                  _context4.next = 12;
                  break;
                }

                this._loaded = false;
                key = this._key;
                this._key = -1;
                _context4.next = 6;
                return regeneratorRuntime.awrap(_reactNative.NativeModules.ExponentAV.unloadForSound(key));

              case 6:
                _status2 = _context4.sent;

                this._callOnPlaybackStatusUpdateForNewStatus(_status2);

                this._clearSubscriptions();

                return _context4.abrupt("return", _status2);

              case 12:
                return _context4.abrupt("return", this.getStatusAsync());

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "setStatusAsync",
      value: function setStatusAsync(status) {
        var _this3 = this;

        return regeneratorRuntime.async(function setStatusAsync$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                (0, _AV._throwErrorIfValuesOutOfBoundsInStatus)(status);
                return _context5.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.setStatusForSound(_this3._key, status);
                }));

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "replayAsync",
      value: function replayAsync() {
        var _this4 = this;

        var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return regeneratorRuntime.async(function replayAsync$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (!(status.positionMillis && status.positionMillis !== 0)) {
                  _context6.next = 2;
                  break;
                }

                throw new Error('Requested position after replay has to be 0.');

              case 2:
                return _context6.abrupt("return", this._performOperationAndHandleStatusAsync(function () {
                  return _reactNative.NativeModules.ExponentAV.replaySound(_this4._key, _extends({}, status, {
                    positionMillis: 0,
                    shouldPlay: true
                  }));
                }));

              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, null, this);
      }
    }]);

    return Sound;
  }();

  Sound.create = function _callee2(source) {
    var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var sound, status;
    return regeneratorRuntime.async(function _callee2$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            sound = new Sound();
            sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);
            _context7.next = 4;
            return regeneratorRuntime.awrap(sound.loadAsync(source, initialStatus, downloadFirst));

          case 4:
            status = _context7.sent;
            return _context7.abrupt("return", {
              sound: sound,
              status: status
            });

          case 6:
          case "end":
            return _context7.stop();
        }
      }
    }, null, _this5);
  };

  _extends(Sound.prototype, _AV._COMMON_AV_PLAYBACK_METHODS);
});