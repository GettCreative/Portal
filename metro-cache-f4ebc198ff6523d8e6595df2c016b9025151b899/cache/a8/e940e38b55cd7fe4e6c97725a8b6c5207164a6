__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var RNAdMobRewarded = _reactNative.NativeModules.RNAdMobRewarded;
  var adMobRewardedEventEmitter = new _reactNative.NativeEventEmitter(RNAdMobRewarded);
  var eventNames = ['rewardedVideoDidRewardUser', 'rewardedVideoDidLoad', 'rewardedVideoDidFailToLoad', 'rewardedVideoDidOpen', 'rewardedVideoDidStart', 'rewardedVideoDidClose', 'rewardedVideoWillLeaveApplication'];
  var eventHandlers = {};
  eventNames.forEach(function (eventName) {
    eventHandlers[eventName] = new Map();
  });

  var addEventListener = function addEventListener(type, handler) {
    if (eventNames.includes(type)) {
      eventHandlers[type].set(handler, adMobRewardedEventEmitter.addListener(type, handler));
    } else {
      console.log("Event with type " + type + " does not exist.");
    }
  };

  var removeEventListener = function removeEventListener(type, handler) {
    var eventSubscription = eventHandlers[type].get(handler);

    if (!eventHandlers[type].has(handler) || !eventSubscription) {
      return;
    }

    eventSubscription.remove();
    eventHandlers[type].delete(handler);
  };

  var removeAllListeners = function removeAllListeners() {
    return eventNames.forEach(function (eventName) {
      return adMobRewardedEventEmitter.removeAllListeners(eventName);
    });
  };

  module.exports = _extends({}, RNAdMobRewarded, {
    requestAdAsync: function requestAdAsync() {
      return RNAdMobRewarded.requestAd();
    },
    showAdAsync: function showAdAsync() {
      return RNAdMobRewarded.showAd();
    },
    dismissAdAsync: function dismissAdAsync() {
      return new Promise(function (resolve, reject) {
        if (_reactNative.Platform.OS === 'ios') {
          RNAdMobRewarded.dismissAd().then(resolve).catch(reject);
        } else {
          reject(new Error('Dismissing ads programmatically is supported only on iOS.'));
        }
      });
    },
    getIsReadyAsync: function getIsReadyAsync() {
      return RNAdMobRewarded.getIsReady();
    },
    addEventListener: addEventListener,
    removeEventListener: removeEventListener,
    removeAllListeners: removeAllListeners
  });
});